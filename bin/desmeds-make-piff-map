#!/usr/bin/env python
"""
will take the coadd file to be the DESDM psfex file from
the /psfs subdirectory
"""
from __future__ import print_function
import os
import numpy
import fitsio
import desmeds

from argparse import ArgumentParser

parser=ArgumentParser()

parser.add_argument('medsconf',help='e.g. y3v02')
parser.add_argument('piff_run',help='e.g. y3a1-v23')
parser.add_argument('tilename',help='e.g. DES0547-3206')
parser.add_argument('band',help='e.g. i')

class PSFMapMaker(dict):
    def __init__(self, piff_run, medsconf, tilename, band):
        self['piff_run'] = piff_run
        self['medsconf'] = medsconf
        self['tilename'] = tilename
        self['band'] = band

        self._check()

    def go(self):
        self._load_psfex_info()
        self._load_exp_summaries()
        self._make_map()
        self._write_map()

    def _load_psfex_info(self):
        """
        load the original psfex psf map file
        """

        fname=self._get_psfex_map_file()

        exp_dict={}
        plist=[]
        print("reading psf info from '%s'" % fname)
        with open(fname) as fobj:
            for line in fobj:
                ls = line.split()

                if ls[0]=='-9999':
                    key = 'coadd'
                else:
                    key = 'D%s-%s' % (ls[0], ls[1])

                expnum = int(ls[0])
                entry = dict(
                    key=key,

                    expstr=ls[0],
                    ccdstr=ls[1],
                    psfex_path=ls[2],

                    expnum=expnum,
                    ccdnum=int(ls[1]),
                )

                exp_dict[expnum] = dict(
                    key=key,
                    expnum=expnum,
                )

                plist.append(entry)

        self.plist=plist
        self.exp_dict=exp_dict

    def _get_psfex_map_file(self):
        return desmeds.files.get_psfmap_file(
            medsconf=self['medsconf'],
            tilename=self['tilename'],
            band=self['band'],
        )

    def _load_exp_summaries(self):
        for expnum, entry in self.exp_dict.iteritems():
            if entry['key'] != 'coadd':
                fname = desmeds.files.get_piff_exp_summary_file(
                    self['piff_run'],
                    expnum,
                )
                print(fname)
                if not os.path.exists(fname):
                    print("missing file:",fname)
                    entry['exists'] = False
                    entry['data'] = None
                else:
                    entry['exists'] = True
                    data = fitsio.read(fname, ext='info')
                    entry['data'] = data

    
    def _make_map(self):
        """
        make new map entries for piff, except for coadd
        """

        for p in self.plist:
            if p['key']=='coadd':
                path=p['psfex_path']
            else:
                path=self._get_piff_path_from_summary(p)

            p['piff_path'] = path


    def _get_piff_path_from_summary(self, p):
        key = p['key']

        entry = self.exp_dict[ p['expnum'] ]
        if not entry['exists']:
            return "missing"
        else:
            data = entry['data']
            w,=numpy.where(data['key'] == key)
            if w.size == 0:
                raise ValueError("not found: '%s'" % key)
            assert w.size==1

            path = data['piff_file'][w[0]]
            path = self._replace_piff_dir(path)
            return path

    def _replace_piff_dir(self, path):
        """
        replace actual base path with env variable specifier $PIFF_DATA_DIR
        """
        ename = 'PIFF_DATA_DIR'
        edir = os.environ[ename]
        return path.replace(edir, '$'+ename)
        

    def _write_map(self):
        outfile = desmeds.files.get_piff_map_file(
            self['medsconf'],
            self['piff_run'],
            self['tilename'],
            self['band'],
        )
        print("writing to file:",outfile)
        dir=os.path.dirname(outfile)
        if not os.path.exists(dir):
            print("making dir:",dir)
            try:
                os.makedirs(dir)
            except:
                pass

        with open(outfile,'w') as fobj:
            for p in self.plist:
                line = '%s %s %s' % (p['expstr'], p['ccdstr'], p['piff_path'])
                print(line)
                print(line, file=fobj)
        print("wrote file:",outfile)

    def _check(self):
        assert 'PIFF_MAP_DIR' in os.environ
        assert 'PIFF_DATA_DIR' in os.environ
        assert 'MEDS_DIR' in os.environ

if __name__=="__main__":
    args = parser.parse_args()
    maker = PSFMapMaker(
        args.piff_run,
        args.medsconf,
        args.tilename,
        args.band,
    )
    maker.go()
